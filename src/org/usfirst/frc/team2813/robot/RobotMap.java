package org.usfirst.frc.team2813.robot;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static SpeedController elevatorelevatorLeft, elevatorelevatorRight;
	public static Encoder elevatorelevatorEncoder;
	public static DigitalInput elevatorelevatorMagnet;
	public static SpeedController intakePivotintakePivotLeft, intakePivotintakePivotRight;
	public static AnalogPotentiometer intakePivotintakePotLeft, intakePivotintakePotRight;
	public static DoubleSolenoid carriagecarriageSolenoid;
	public static SpeedController intakeRollersintakeRollerLeft, intakeRollersintakeRollerRight;
	public static SpeedController pIDDrivefrontLeft, pIDDrivefrontRight, pIDDrivebackLeft, pIDDrivebackRight;
	public static Compressor compressor;
	public static DigitalOutput elevatorGet;
	public static RobotDrive drive;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		elevatorelevatorLeft = new Talon(6);
		elevatorelevatorRight = new Talon(1);
		LiveWindow.addActuator("Elevator", "elevatorRight", (Talon) elevatorelevatorRight);
		LiveWindow.addActuator("Elevator", "elevatorLeft", (Talon) elevatorelevatorLeft);

		elevatorelevatorEncoder = new Encoder(0, 1, 2, false);
		LiveWindow.addSensor("Elevator", "elevatorEncoder", elevatorelevatorEncoder);
		elevatorelevatorEncoder.setDistancePerPulse(1.0);
		elevatorelevatorEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
		elevatorelevatorMagnet = new DigitalInput(3);
		LiveWindow.addSensor("Elevator", "elevatorMagnet", elevatorelevatorMagnet);
		elevatorGet = new DigitalOutput(4);


		intakePivotintakePivotLeft = new Victor(7);
		intakePivotintakePivotRight = new Victor(2);
		LiveWindow.addActuator("IntakePivot", "intakePivotRight", (Victor) intakePivotintakePivotRight);
		LiveWindow.addActuator("IntakePivot", "intakePivotLeft", (Victor) intakePivotintakePivotLeft);

		intakePivotintakePotLeft = new AnalogPotentiometer(0, 1.0, 0.0);
		intakePivotintakePotRight = new AnalogPotentiometer(1, 1.0, 0.0);
		LiveWindow.addSensor("IntakePivot", "intakePotRight", intakePivotintakePotRight);
		LiveWindow.addSensor("IntakePivot", "intakePotLeft", intakePivotintakePotLeft);

		carriagecarriageSolenoid = new DoubleSolenoid(0, 0, 1);
		LiveWindow.addActuator("Carriage", "carriageSolenoid", carriagecarriageSolenoid);

		intakeRollersintakeRollerLeft = new Victor(8);
		intakeRollersintakeRollerRight = new Victor(3);
		LiveWindow.addActuator("IntakeRollers", "intakeRollerRight", (Victor) intakeRollersintakeRollerRight);
		LiveWindow.addActuator("IntakeRollers", "intakeRollerLeft", (Victor) intakeRollersintakeRollerLeft);

		compressor = new Compressor(0);

		boolean isPractice = true;
		if (isPractice){
			pIDDrivefrontLeft = new Talon(5);
			pIDDrivefrontRight = new Talon(9);
			pIDDrivebackLeft = new Talon(0);
			pIDDrivebackRight = new Talon(4);
			LiveWindow.addActuator("PIDDrive", "frontLeft", (Talon) pIDDrivefrontLeft);
			LiveWindow.addActuator("PIDDrive", "frontRight", (Talon) pIDDrivefrontRight);
			LiveWindow.addActuator("PIDDrive", "backLeft", (Talon) pIDDrivebackLeft);
			LiveWindow.addActuator("PIDDrive", "backRight", (Talon) pIDDrivebackRight);
		} else {
			pIDDrivefrontLeft = new VictorSP(4);
			pIDDrivefrontRight = new VictorSP(5);
			pIDDrivebackLeft = new VictorSP(6);
			pIDDrivebackRight = new VictorSP(7);
			LiveWindow.addActuator("PIDDrive", "frontLeft", (VictorSP) pIDDrivefrontLeft);
			LiveWindow.addActuator("PIDDrive", "frontRight", (VictorSP) pIDDrivefrontRight);
			LiveWindow.addActuator("PIDDrive", "backLeft", (VictorSP) pIDDrivebackLeft);
			LiveWindow.addActuator("PIDDrive", "backRight", (VictorSP) pIDDrivebackRight);
		}
		drive = new RobotDrive(pIDDrivefrontLeft, pIDDrivebackLeft, pIDDrivefrontRight, pIDDrivebackRight);
		//Invert Motors
		drive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
		drive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
	}
}