package org.usfirst.frc.team2813.robot;

import org.usfirst.frc.team2813.subsystems.*;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    Command autonomousCommand;

    public static OI oi;
    public static Elevator elevator;
    public static Nav6 nav6;
    public static PIDDrive pIDDrive;
    public static IntakePivot intakePivot;;
    public static Carriage carriage;
    public static IntakeRollers intakeRollers;
    public static Compressor compressor;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        RobotMap.init();
        nav6 = new Nav6();
        elevator = new Elevator();
        pIDDrive = new PIDDrive();
        intakePivot = new IntakePivot();
        carriage = new Carriage();
        intakeRollers = new IntakeRollers();
        compressor = new Compressor();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        if (RobotMap.elevatorelevatorMagnet.get()) {
            SmartDashboard.putString("MagnetStatus", "True");

        }
        else
            SmartDashboard.putString("MagnetStatus", "False");
        //SmartDashboard.putBoolean("Reed Sensor",
        //		RobotMap.elevatorelevatorMagnet.get());
        RobotMap.elevatorGet.set(RobotMap.elevatorelevatorMagnet.get());

        if (oi.getdriver1().getRawButton(1)) nav6.resetNav6(); //if button 1 is pressed on joystick the nav6 resets heading
        nav6.displayNav6Data(true); //Display Nav6 data on SmartDashboard or not
        SmartDashboard.putBoolean("Reed Sensor", elevator.getMagnet());
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        nav6.displayNav6Data(true);
        Scheduler.getInstance().run();
        SmartDashboard.putBoolean("MagSensor", elevator.getMagnet());
        SmartDashboard.putInt("Counter", elevator.getCounter());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
